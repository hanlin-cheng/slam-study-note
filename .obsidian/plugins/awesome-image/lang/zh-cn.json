{
    "manifest": {
        "translationVersion": 1742985845902,
        "pluginVersion": "0.1.3"
    },
    "description": {
        "original": "One-stop solution for image management.",
        "translation": "One-stop solution for image management."
    },
    "dict": {
        "Notice(\"Unsafe regex! https://www.npmjs.com/package/safe-regex\")": "Notice(\"Unsafe regex! https://www.npmjs.com/package/safe-regex\")",
        "Notice(t(\"COPY_IMAGE_SUCCESS\")": "Notice(t(\"COPY_IMAGE_SUCCESS\")",
        "Notice(t(\"COPY_IMAGE_ERROR\")": "Notice(t(\"COPY_IMAGE_ERROR\")",
        "Notice(`Page \"${file.path}\" has been processed, and changed.`)": "Notice(`Page \"${file.path}\" has been processed, and changed.`)",
        "Notice(`Page \"${file.path}\" has been processed, but nothing was changed.`)": "Notice(`Page \"${file.path}\" has been processed, but nothing was changed.`)",
        "Notice(\"Orphaned images copied to clipboard\")": "Notice(\"Orphaned images copied to clipboard\")",
        "Notice(`Awesome Image \\nStart processing. Total ${pagesCount} pages. `, TIMEOUT_LIKE_INFINITY)": "Notice(`Awesome Image \\nStart processing. Total ${pagesCount} pages. `, TIMEOUT_LIKE_INFINITY)",
        "Notice(warn_txt)": "Notice(warn_txt)",
        "Notice(`Failed to rename ${newFileName}: no active editor`)": "Notice(`Failed to rename ${newFileName}: no active editor`)",
        "Notice(`Renamed ${oldFileName} to ${newFileName}`)": "Notice(`Renamed ${oldFileName} to ${newFileName}`)",
        ".log('copyText:', copyText)": ".log('copyText:', copyText)",
        ".log('calculateImgZoomSize', 'realImg: ' + realImg.width + ',' + realImg.height,\r\n        'tempSize: ' + tempWidth + ',' + tempHeight,\r\n        'windowZoomSize: ' + windowZoomWidth + ',' + windowZoomHeight,\r\n        'windowSize: ' + windowWidth + ',' + windowHeight)": ".log('calculateImgZoomSize', 'realImg: ' + realImg.width + ',' + realImg.height,\r\n        'tempSize: ' + tempWidth + ',' + tempHeight,\r\n        'windowZoomSize: ' + windowZoomWidth + ',' + windowZoomHeight,\r\n        'windowSize: ' + windowWidth + ',' + windowHeight)",
        ".log('keyup', event, event.key)": ".log('keyup', event, event.key)",
        ".log('keydown', event, event.key, this.imgStatus)": ".log('keydown', event, event.key, this.imgStatus)",
        ".log('mouseenterImgView', event, this.imgGlobalStatus.activeImg)": ".log('mouseenterImgView', event, this.imgGlobalStatus.activeImg)",
        ".log('mousedownImgView', event, this.imgGlobalStatus.activeImg, event.button)": ".log('mousedownImgView', event, this.imgGlobalStatus.activeImg, event.button)",
        ".log('mousemoveImgView', event, this.imgGlobalStatus.activeImg)": ".log('mousemoveImgView', event, this.imgGlobalStatus.activeImg)",
        ".log('mouseupImgView', event, this.imgGlobalStatus.activeImg)": ".log('mouseupImgView', event, this.imgGlobalStatus.activeImg)",
        ".log('mouseleaveImgView', event, this.imgGlobalStatus.activeImg, '>>> set null')": ".log('mouseleaveImgView', event, this.imgGlobalStatus.activeImg, '>>> set null')",
        ".log('mousedownImgView: double click...', activeImg.index)": ".log('mousedownImgView: double click...', activeImg.index)",
        ".log('getAndUpdateActiveImg: ', activeImg)": ".log('getAndUpdateActiveImg: ', activeImg)",
        ".log((i + 1)": ".log((i + 1)",
        ".log('oit-gallery-navbar: ' + (hitCache ? 'hit cache' : 'miss cache')": ".log('oit-gallery-navbar: ' + (hitCache ? 'hit cache' : 'miss cache')",
        ".log('IMAGE_SELECTOR>>', imageSelector, imgs)": ".log('IMAGE_SELECTOR>>', imageSelector, imgs)",
        ".log('mouse Down Gallery...')": ".log('mouse Down Gallery...')",
        ".log('mouse Move Gallery...')": ".log('mouse Move Gallery...')",
        ".log('move...', 'windowWidth=' + windowWidth, 'galleryTranslateX=' + galleryTranslateX, 'li count=' + imgInfo.galleryList.childElementCount)": ".log('move...', 'windowWidth=' + windowWidth, 'galleryTranslateX=' + galleryTranslateX, 'li count=' + imgInfo.galleryList.childElementCount)",
        ".log('mouse Up Gallery>>>', event.target)": ".log('mouse Up Gallery>>>', event.target)",
        ".log('mouse Leave Gallery>>>', event.target)": ".log('mouse Leave Gallery>>>', event.target)",
        ".log('closeContainerView', event, activeImg)": ".log('closeContainerView', event, activeImg)",
        "glog('stream')": "glog('stream')",
        ".log(tagName)": ".log(tagName)",
        ".log(\"start:\"+attrStr+\":end\")": ".log(\"start:\"+attrStr+\":end\")",
        ".log(options)": ".log(options)",
        ".log(searchParams.toString()": ".log(searchParams.toString()",
        ".log(response.body)": ".log(response.body)",
        ".log(headers.via)": ".log(headers.via)",
        ".log(parsed)": ".log(parsed)",
        ".log(`Awesome Image changed link: FROM |${link}| TO |${newFileName}|`)": ".log(`Awesome Image changed link: FROM |${link}| TO |${newFileName}|`)",
        ".log(resultText)": ".log(resultText)",
        ".log('mouseoverImg......')": ".log('mouseoverImg......')",
        ".log('mouseoutImg....')": ".log('mouseoutImg....')",
        ".log('selector: ', selector)": ".log('selector: ', selector)",
        ".log(\"loading \" + this.manifest.id + \" plugin v\" + this.manifest.version + \" ...\")": ".log(\"loading \" + this.manifest.id + \" plugin v\" + this.manifest.version + \" ...\")",
        ".log(\"current line: \", line)": ".log(\"current line: \", line)",
        ".log(\"unloading obsidian-image-toolkit plugin...\")": ".log(\"unloading obsidian-image-toolkit plugin...\")",
        ".error(\"Error: Image toolkit locale not found\", obsidian.moment.locale()": ".error(\"Error: Image toolkit locale not found\", obsidian.moment.locale()",
        ".error('copy text error', err)": ".error('copy text error', err)",
        ".error(error)": ".error(error)",
        ".error('obsidian-image-toolkit: oit-*-container-view has not been initialized!')": ".error('obsidian-image-toolkit: oit-*-container-view has not been initialized!')",
        "nerror(err)": "nerror(err)",
        "nerror(er)": "nerror(er)",
        ".error(value)": ".error(value)",
        "_error(new RequestError$1(error_.message, error_, this)": "_error(new RequestError$1(error_.message, error_, this)",
        "_error(new RequestError$1(error_.message, error, this)": "_error(new RequestError$1(error_.message, error, this)",
        "_error(typedError)": "_error(typedError)",
        "_error(error)": "_error(error)",
        "name: ' + name + '": "name: ' + name + '",
        "name: '',\n    password: '": "name: '',\n    password: '",
        "name: 'Error'": "name: 'Error'",
        "name: \"Process images for active file\"": "name: \"Process images for active file\"",
        "name: \"Process images for all your notes\"": "name: \"Process images for all your notes\"",
        "name: \"List images that are not linked by your notes\"": "name: \"List images that are not linked by your notes\"",
        "text: \"Awesome Image\"": "text: \"Awesome Image\"",
        ".setName(\"On paste processing\")": ".setName(\"On paste processing\")",
        ".setName(\"Ignore folders\")": ".setName(\"Ignore folders\")",
        ".setName(\"Include\")": ".setName(\"Include\")",
        ".setName(\"Media folder\")": ".setName(\"Media folder\")",
        ".setDesc(\"Process active page if image was pasted.\")": ".setDesc(\"Process active page if image was pasted.\")",
        ".setDesc(\"Do not search or rename attachments in these folders. Write each folder on a new line.\")": ".setDesc(\"Do not search or rename attachments in these folders. Write each folder on a new line.\")",
        ".setDesc(\"Include only files matching this regex pattern when running on all notes.\")": ".setDesc(\"Include only files matching this regex pattern when running on all notes.\")",
        ".setDesc(\"Folder to keep all downloaded media files.\")": ".setDesc(\"Folder to keep all downloaded media files.\")",
        ".setPlaceholder(\"Example:\\n.git/\\n.obsidian/\")": ".setPlaceholder(\"Example:\\n.git/\\n.obsidian/\")",
        ".setTooltip('restore default color')": ".setTooltip('restore default color')",
        ".innerText = \" \"": ".innerText = \" \""
    }
}
